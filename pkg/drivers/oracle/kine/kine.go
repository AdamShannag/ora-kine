package kine

import (
	"context"
	"database/sql"
	"regexp"
	"strings"

	"github.com/AdamShannag/ora-kine/pkg/util"
	"github.com/sirupsen/logrus"
)

type OraErrorCode string

const (
	UniqueViolation         OraErrorCode = "ORA-00001"
	NameAlreadyInUse        OraErrorCode = "ORA-00955"
	CannotBindLong          OraErrorCode = "ORA-01461"
	TableOrViewDoesNotExist OraErrorCode = "ORA-00942"
)

func ErrorIs(err error, code OraErrorCode) bool {
	if err == nil {
		return false
	}
	return strings.Contains(err.Error(), string(code))
}

var kine string = `
CREATE TABLE KINE(
			id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
			name VARCHAR2(630),
			created NUMBER,
			deleted NUMBER,
			create_revision NUMBER,
			prev_revision NUMBER,
			lease NUMBER,
			value BLOB,
			old_value BLOB
		)
`

var indexMap = map[string]string{
	"KINE_NAME_INDEX":                "CREATE INDEX KINE_NAME_INDEX ON KINE (NAME)",
	"KINE_NAME_ID_INDEX":             "CREATE INDEX KINE_NAME_ID_INDEX ON KINE (NAME, ID)",
	"KINE_ID_DELETED_INDEX":          "CREATE INDEX KINE_ID_DELETED_INDEX ON KINE (ID, DELETED)",
	"KINE_PREV_REVISION_INDEX":       "CREATE INDEX KINE_PREV_REVISION_INDEX ON KINE (PREV_REVISION)",
	"KINE_NAME_PREV_REVISION_UINDEX": "CREATE UNIQUE INDEX KINE_NAME_PREV_REVISION_UINDEX ON KINE (NAME, PREV_REVISION)",
}

func Setup(ctx context.Context, db *sql.DB) error {
	logrus.Infof("Configuring database table schema and indexes, this may take a moment...")

	if !tableExists(ctx, db, "KINE") {
		_, err := db.ExecContext(ctx, kine)
		if err != nil {
			return err
		}
	}

	for index, sql := range indexMap {
		logrus.Tracef("SETUP EXEC : %v", util.Stripped(sql))
		var count int64
		db.QueryRowContext(ctx, "SELECT COUNT(*) FROM user_indexes WHERE table_name = :1 AND index_name = :2", "KINE", index).Scan(&count)
		if count == 0 {
			_, err := db.ExecContext(ctx, sql)
			if err != nil {
				return err
			}
		}
	}
	logrus.Infof("Database tables and indexes are up to date")

	return nil
}

func tableExists(ctx context.Context, db *sql.DB, tableName string) bool {
	var count int
	err := db.QueryRowContext(ctx, "SELECT COUNT(*) FROM user_tables WHERE table_name = :1", tableName)
	err.Scan(&count)
	return count > 0
}

func ExtractErrorCode(err error) string {
	pattern := regexp.MustCompile(`ORA-\d{5}`)
	match := pattern.FindString(err.Error())

	if match != "" {
		return match
	}

	return "-999"
}
